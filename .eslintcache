[{"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\index.js":"1","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\App.js":"2","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\reportWebVitals.js":"3","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\Home.js":"4","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\GameArea.js":"5","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\TextArea.js":"6","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\GameInterface.js":"7","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\CreateOrder.js":"8","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\Keyboard.js":"9","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\constants.js":"10","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\Dialog.js":"11","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\StaticHeart.js":"12","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\AnimatedHeart.js":"13","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\BTN.js":"14","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\HighScoreTable.js":"15","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\InGameHeader.js":"16","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\HighScoreInputDialog.js":"17"},{"size":517,"mtime":1611862454985,"results":"18","hashOfConfig":"19"},{"size":2761,"mtime":1646747163177,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1409,"mtime":1646236335878,"results":"22","hashOfConfig":"19"},{"size":7425,"mtime":1646749236569,"results":"23","hashOfConfig":"19"},{"size":4013,"mtime":1646750714571,"results":"24","hashOfConfig":"19"},{"size":4013,"mtime":1646227134491,"results":"25","hashOfConfig":"19"},{"size":364,"mtime":1611862630081,"results":"26","hashOfConfig":"19"},{"size":3570,"mtime":1646748782792,"results":"27","hashOfConfig":"19"},{"size":1071,"mtime":1620212158299,"results":"28","hashOfConfig":"19"},{"size":3892,"mtime":1646825913275,"results":"29","hashOfConfig":"19"},{"size":639,"mtime":1620218326119,"results":"30","hashOfConfig":"19"},{"size":2667,"mtime":1620218730026,"results":"31","hashOfConfig":"19"},{"size":1954,"mtime":1646750569749,"results":"32","hashOfConfig":"19"},{"size":2851,"mtime":1646753572545,"results":"33","hashOfConfig":"19"},{"size":509,"mtime":1646677044557,"results":"34","hashOfConfig":"19"},{"size":1733,"mtime":1646752738519,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1kds727",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\index.js",[],["78","79"],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\App.js",[],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\reportWebVitals.js",[],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\Home.js",["80"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../constants\";\r\nimport Logo from \"../img/emmetgame_frontlogo_schatten.png\";\r\nimport HighScoreTable from \"./HighScoreTable\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Main>\r\n      <LOGO alt=\"logo\" src={Logo} />\r\n      <Text>\r\n        Erlerne Emmet-Befehle spielerisch! <br />\r\n        Drücke oben rechts den Start-Button.\r\n        <br />\r\n        Viel Spaß! :-D\r\n      </Text>\r\n\r\n      <URLBtn\r\n        title=\"Externer Link zur offiziellen Auflistung der Emmet-Befehle\"\r\n        href=\"https://docs.emmet.io/cheat-sheet/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Emmet-Befehle\r\n      </URLBtn>\r\n      <Text>\r\n        <small>(Zum offiziellen Cheat-Sheet der Emmet-Befehle)</small>\r\n      </Text>\r\n    </Main>\r\n  );\r\n}\r\n\r\nconst Main = styled.section`\r\n  text-align: center;\r\n`;\r\nconst LOGO = styled.img`\r\n  text-align: center;\r\n  width: 50vw;\r\n  max-width: 300px;\r\n  margin: 10vh 0 0 0;\r\n`;\r\n\r\nconst URLBtn = styled.a`\r\n  background-color: rgb(${COLORS.primary});\r\n  color: rgb(${COLORS.lightText});\r\n  text-decoration: none;\r\n  letter-spacing: 1px;\r\n  box-shadow: 1px 2px 3px 3px rgba(58, 32, 10, 0.2);\r\n  padding: 10px;\r\n  &:hover {\r\n    background-color: rgb(${COLORS.middleviolet});\r\n  }\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-size: 1em;\r\n  margin-bottom: 5em;\r\n`;\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\GameArea.js",["81","82","83","84"],"import React, { useState, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS, VIEWPORT } from \"../constants\";\r\nimport GameInterface from \"./GameInterface\";\r\n/* import { exercises } from \"../data/exercises.json\";*/\r\nimport { exercises } from \"../data/exercises5.json\";\r\nimport TextArea, { Feedback } from \"./TextArea\";\r\n//import GameOverDialog from './GameOverDialog'\r\n//import WinnerDialog from './WinnerDialog'\r\nimport Dialog from \"./Dialog\";\r\nimport CreateOrder from \"./CreateOrder\";\r\nimport Keyboard from \"./Keyboard\";\r\nimport Headlogo from \"../img/emmetgame_headlogo_schatten.png\";\r\nimport InGameHeader from \"./InGameHeader\";\r\n\r\nexport default function GameArea() {\r\n  let order = CreateOrder();\r\n  const [inputText, setInputText] = useState(\"Welcher Emmet-Befehl passt?\");\r\n  const [scoreState, setScoreState] = useState(0);\r\n  const [feedback, setFeedback] = useState(\" \");\r\n\r\n  const [life, setLife] = useState(3);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [orderNum, setOrderNum] = useState(0);\r\n  const [dialogType, setDialogType] = useState(\"kein Dialogtype gewählt\");\r\n  /* const [stopAnimation, setStopAnimation] = useState(\"running\") */\r\n  const [stopAnimation, setStopAnimation] = useState(\"paused\");\r\n  const [type, setType] = useState(\"\");\r\n\r\n  let hint = exercises[order[orderNum]].emmet;\r\n\r\n  const newText = exercises[order[orderNum]].result\r\n    .split(\"\\n\")\r\n    .map((item, i) => {\r\n      return (\r\n        <span key={i}>\r\n          {item}\r\n          <br />\r\n        </span>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <Gamefield>\r\n      <InGameHeader />\r\n      <Dialog\r\n        visible={visible}\r\n        setVisible={setVisible}\r\n        setLife={setLife}\r\n        life={life}\r\n        //life={life.current}\r\n        scoreState={scoreState}\r\n        setScoreState={setScoreState}\r\n        setFeedback={setFeedback}\r\n        setOrderNum={setOrderNum}\r\n        dialogType={dialogType}\r\n      />\r\n      <Boxarea>\r\n        <div>{Feedback(feedback)}</div>\r\n        <DIV>\r\n          <p>\r\n            {orderNum + 1} / {exercises.length}\r\n          </p>\r\n        </DIV>\r\n        <InsetShadow>\r\n          <Box>\r\n            <Textbox>\r\n              <code>{newText}</code>\r\n            </Textbox>\r\n            <TextArea\r\n              amountOfQuestions={exercises.length}\r\n              hint={hint}\r\n              inputText={inputText}\r\n              setInputText={setInputText}\r\n              scoreState={scoreState}\r\n              setScoreState={setScoreState}\r\n              setFeedback={setFeedback}\r\n              setLife={setLife}\r\n              life={life}\r\n              //life={life.current}\r\n              setVisible={setVisible}\r\n              orderNum={orderNum}\r\n              setOrderNum={setOrderNum}\r\n              setDialogType={setDialogType}\r\n              stopAnimation={stopAnimation}\r\n              setStopAnimation={setStopAnimation}\r\n            />\r\n          </Box>\r\n        </InsetShadow>\r\n\r\n        <GameinterfaceDesk>\r\n          <GameInterface\r\n            hint={hint}\r\n            scoreState={scoreState}\r\n            life={life}\r\n            //life={life.current}\r\n\r\n            stopAnimation={stopAnimation}\r\n            setStopAnimation={setStopAnimation}\r\n          />\r\n        </GameinterfaceDesk>\r\n      </Boxarea>\r\n      {/*  <GameinterfaceDesk>\r\n                <GameInterface\r\n                    hint={hint}\r\n                    scoreState={scoreState}\r\n                    life={life}\r\n                /> \r\n              \r\n            </GameinterfaceDesk>*/}\r\n\r\n      <Gameinterface>\r\n        <GameInterface\r\n          hint={hint}\r\n          scoreState={scoreState}\r\n          life={life}\r\n          //life={life.current}\r\n\r\n          stopAnimation={stopAnimation}\r\n          setStopAnimation={setStopAnimation}\r\n        />\r\n        <KeyboardStyle>\r\n          <Keyboard\r\n            inputText={inputText}\r\n            setInputText={setInputText}\r\n            order={order}\r\n            orderNum={orderNum}\r\n          />\r\n        </KeyboardStyle>\r\n      </Gameinterface>\r\n    </Gamefield>\r\n  );\r\n}\r\n\r\nconst Gamefield = styled.section`\r\n  display: flex;\r\n  justify-content: center;\r\n  text-align: center;\r\n  height: 90vh;\r\n  margin-top: -40px;\r\n`;\r\n\r\nconst Boxarea = styled.div`\r\n  width: auto;\r\n  height: auto;\r\n  margin-top: 7vh;\r\n`;\r\n\r\nconst DIV = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  & p {\r\n    color: rgb(${COLORS.light});\r\n    font-size: 0.5em;\r\n  }\r\n  margin-top: -4vh;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  background-color: rgba(${COLORS.light}, 0.2);\r\n  padding: 10px;\r\n  border-style: solid;\r\n  border-width: 2px;\r\n  border-image: linear-gradient(\r\n      to bottom,\r\n      rgba(${COLORS.light}, 0) 1%,\r\n      rgba(${COLORS.light}, 0.8) 10%,\r\n      rgba(${COLORS.light}, 0) 100%\r\n    )\r\n    1 100%;\r\n  width: 80vw;\r\n  height: auto;\r\n  box-shadow: 1px 1px 8px 3px ${COLORS.shadow_RGBA};\r\n\r\n  ${VIEWPORT.small} {\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n    width: 50vw;\r\n  }\r\n`;\r\nconst InsetShadow = styled.div`\r\n  box-shadow: inset 1px 1px 2px 0px rgba(${COLORS.light}, 0.8);\r\n`;\r\nconst Textbox = styled.div`\r\n  color: rgb(${COLORS.code});\r\n  scrollbar-width: thin;\r\n  scrollbar-color: rgba(${COLORS.primary}, 0.3) rgba(${COLORS.primary}, 0);\r\n  background-color: rgba(${COLORS.violet}, 0.7);\r\n  padding: 10px 3px;\r\n  height: 20vh;\r\n  overflow-x: scroll;\r\n  overscroll-behavior: none;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    scrollbar-color: rgba(${COLORS.primary}, 0.3) rgba(${COLORS.primary}, 0);\r\n    // background-color: #F5F5F5;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: rgba(${COLORS.violet}, 0.8);\r\n    border-radius: 10px;\r\n  }\r\n  ::-webkit-scrollbar-corner {\r\n    display: hidden;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  ${VIEWPORT.small} {\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n    height: 45vh;\r\n  }\r\n`;\r\n\r\nconst Gameinterface = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"score middle life\"\r\n    \"keyboard keyboard keyboard\";\r\n  grid-template-rows: 1fr 5fr;\r\n  grid-template-columns: 1fr 6fr 1fr;\r\n  position: fixed;\r\n  bottom: 0px;\r\n  width: 100vw;\r\n  ${VIEWPORT.small} {\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n    display: none;\r\n  }\r\n`;\r\nconst GameinterfaceDesk = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"score middle life\"\r\n    \"keyboard keyboard keyboard\";\r\n  grid-template-rows: 1fr 5fr;\r\n  grid-template-columns: 1fr 6fr 1fr;\r\n  margin: 40px 0;\r\n  position: fixed;\r\n  width: 52vw;\r\n\r\n  ${VIEWPORT.small} {\r\n    display: none;\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n    display: none;\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n  }\r\n`;\r\n\r\nconst KeyboardStyle = styled.section`\r\n  grid-area: keyboard;\r\n  display: flex;\r\n  user-select: none;\r\n  font-size: calc(10px + 2vmin);\r\n  width: 100vw;\r\n  margin-top: -1vh;\r\n  /* offset-x | offset-y | blur-radius | spread-radius | color */\r\n  box-shadow: 2px 2px 5px 6px ${COLORS.shadow_RGBA};\r\n\r\n  & button {\r\n    color: ${COLORS.text};\r\n    text-shadow: 2px 2px 2px rgba(255, 255, 255, 0.5);\r\n    font-weight: bold;\r\n    font-size: 1.3em;\r\n    border: none;\r\n    margin: 1px;\r\n    background: linear-gradient(\r\n      135deg,\r\n      rgba(${COLORS.background2_NUM}, 0.5) 1%,\r\n      rgba(${COLORS.light}, 0.4) 35%,\r\n      rgb(${COLORS.background1_NUM}, 1) 100%\r\n    );\r\n  }\r\n`;\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\TextArea.js",["85","86","87","88"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS, VIEWPORT } from \"../constants\";\r\nimport BTN from \"./BTN\";\r\n\r\nexport default function TextArea(props) {\r\n  const {\r\n    amountOfQuestions,\r\n    hint,\r\n    inputText,\r\n    setInputText,\r\n    setScoreState,\r\n    scoreState,\r\n    setFeedback,\r\n    life,\r\n    setLife,\r\n    setVisible,\r\n    orderNum,\r\n    setOrderNum,\r\n    setDialogType,\r\n  } = props;\r\n\r\n  const trash_icon =\r\n    \"https://img.icons8.com/material-outlined/48/ffffff/trash--v2.png\";\r\n  const clear_icon =\r\n    \"https://img.icons8.com/material-outlined/48/ffffff/clear-symbol--v1.png\";\r\n  const ok_icon = \"https://img.icons8.com/android/48/ffffff/checkmark.png\";\r\n\r\n  const handleOKBtnClick = () => {\r\n    console.log(\"life1: \" + life);\r\n    if (inputText === hint) {\r\n      setScoreState(scoreState + 10);\r\n      setFeedback(\"Richtig :-D\");\r\n      setInputText(\"Welcher Emmet-Befehl passt?\");\r\n      if (orderNum < amountOfQuestions - 1) {\r\n        // -1 da es hier dem höchsten Indexwert von Array \"order\" entsprechen muss und Indizes bei 0 starten // Refactor\r\n        setOrderNum(orderNum + 1);\r\n      } else {\r\n        setFeedback(\"Super, alle Fragen richtig gelöst!\");\r\n\r\n        setVisible(true);\r\n        setDialogType(\"winner\");\r\n      }\r\n    } else {\r\n      setLife(life - 1);\r\n\r\n      setFeedback(\"Falsch :-(\");\r\n\r\n      setInputText(\"Welcher Emmet-Befehl passt?\");\r\n\r\n      if (life <= 1) {\r\n        setFeedback(\"Game Over\");\r\n        setVisible(true);\r\n        setDialogType(\"game_over\");\r\n      }\r\n    }\r\n\r\n    console.log(\"life2: \" + life);\r\n  };\r\n\r\n  const handleDeleteBtnClick = () => {\r\n    setInputText(\"Deine neue Eingabe ...\");\r\n  };\r\n  const handleDeleteOneCharacterBtnClick = () => {\r\n    setInputText(inputText.slice(0, -1));\r\n  };\r\n\r\n  //event.preventDefault();\r\n  console.log(\"inputText\" + inputText);\r\n\r\n  return (\r\n    <>\r\n      <Textarea>{inputText}</Textarea>\r\n      <Input\r\n        length=\"20\"\r\n        onChange={handleTextInput}\r\n        placeholder=\"Welcher Emmet-Befehl passt?\"\r\n      />\r\n\r\n      <BTN type={\"delete\"} onClick={handleDeleteBtnClick} />\r\n      <BTN type={\"clear\"} onClick={handleDeleteOneCharacterBtnClick} />\r\n      <BTN type={\"ok\"} onClick={handleOKBtnClick} />\r\n    </>\r\n  );\r\n  function handleTextInput(e) {\r\n    e.preventDefault();\r\n    setInputText(e.target.value);\r\n  }\r\n}\r\n\r\nexport function Feedback(feedbackText) {\r\n  const Wrap = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 30px;\r\n    margin-bottom: 5px;\r\n  `;\r\n  const DIV = styled.div`\r\n    color: rgb(${COLORS.light});\r\n    font-size: 0.8em;\r\n    font-weight: bold;\r\n    background-color: rgba(${COLORS.light}, 0.2);\r\n    width: 50%;\r\n    border-radius: 20px;\r\n    margin: 20px;\r\n  `;\r\n  return (\r\n    <Wrap>\r\n      <DIV>{feedbackText}</DIV>\r\n    </Wrap>\r\n  );\r\n}\r\n\r\nconst Textarea = styled.div`\r\n  contenteditable: true;\r\n  overflow-wrap: break-word;\r\n  color: white;\r\n  font-weight: bold;\r\n  box-shadow: inset 2px 2px 3px 2px rgba(${COLORS.shadow}, 0.2);\r\n  background-color: #393c8060;\r\n  padding: 10px;\r\n  margin-top: 8px;\r\n  min-height: 1.4em;\r\n\r\n  ${VIEWPORT.small} {\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n    display: none;\r\n  }\r\n`;\r\n\r\n/* \"box-sizing: border-box; \" verhindert das default padding bei Input, ohne ist Input zu groß* >>>*/\r\nconst Input = styled.input`\r\n  text-align: center;\r\n  color: white;\r\n  font-size: 1em;\r\n  font-weight: bold;\r\n  background-color: #393c8060;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-top: 8px;\r\n\r\n  min-height: 1.4em;\r\n  border: none;\r\n  box-shadow: inset 2px 2px 3px 2px rgba(${COLORS.shadow}, 0.2);\r\n  ::placeholder {\r\n    color: white;\r\n    opacity: 0.5;\r\n  }\r\n  :focus,\r\n  input:focus {\r\n    outline: 2px solid rgba(255, 255, 255, 0.5);\r\n  }\r\n\r\n  ${VIEWPORT.small} {\r\n    display: none;\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n    display: none;\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n  }\r\n`;\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\GameInterface.js",["89","90"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS, VIEWPORT } from \"../constants\";\r\nimport StaticHeart from \"../components/StaticHeart\";\r\nimport AnimatedHeart from \"../components/AnimatedHeart\";\r\n\r\nconst life = \"https://img.icons8.com/material/40/000000/hearts--v1.png\";\r\n\r\nexport default function GameInterface(props) {\r\n  const { hint, scoreState, life, stopAnimation, setStopAnimation } = props;\r\n  const [showText, setShowText] = useState(false);\r\n\r\n  const animatedHeart = (\r\n    <AnimatedHeart\r\n      stopAnimation={stopAnimation}\r\n      setStopAnimation={setStopAnimation}\r\n    />\r\n  );\r\n\r\n  function renderLifecon(amount) {\r\n    const DivHeart = styled.div`\r\n      display: flex;\r\n      flex-direction: row;\r\n      padding: 0;\r\n    `;\r\n\r\n    const rows = [];\r\n    if (amount === 3) {\r\n      rows.push(<StaticHeart />);\r\n      rows.push(<StaticHeart />);\r\n      rows.push(<StaticHeart />);\r\n    } else if (amount === 2) {\r\n      /* rows.push(animatedHeart); */\r\n      rows.push(<StaticHeart />);\r\n      rows.push(<StaticHeart />);\r\n      // rows.splice(0, 1)\r\n    } else if (amount === 1) {\r\n      /* rows.push(animatedHeart); */\r\n      rows.push(<StaticHeart />);\r\n    } else if (amount === 0) {\r\n      //TODO: einkommentieren bei animierten Herzen\r\n      /*rows.push(animatedHeart);*/\r\n    }\r\n    return <DivHeart>{rows}</DivHeart>;\r\n  }\r\n  ////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <>\r\n      <Score>\r\n        <p>{scoreState}</p>\r\n      </Score>\r\n      <Hint>\r\n        <HintButton\r\n          title=\"Lösung ein-/ausblenden\"\r\n          onClick={() => setShowText(!showText)}\r\n        >\r\n          HINT\r\n        </HintButton>\r\n        <HintTextDiv>{showText && <HintText>{hint}</HintText>}</HintTextDiv>\r\n      </Hint>\r\n      {/*            <Life>{Lifecon(life)}</Life>*/}\r\n      <Life>{renderLifecon(life)}</Life>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Lifecon(amount) {\r\n  const rows = [];\r\n  for (var i = 0; i < amount; i++) {\r\n    rows.push(<LifeIcon alt=\"\" src={life} key={i} />);\r\n  }\r\n  return <>{rows}</>;\r\n}\r\n\r\nconst HintTextDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 75%;\r\n  height: 100%;\r\n  background-color: rgb(${COLORS.hintfield});\r\n  border-radius: 0 20px 20px 0;\r\n  box-shadow: 2px 2px 5px 6px ${COLORS.shadow_RGBA};\r\n`;\r\n\r\nconst HintText = styled.p`\r\n  color: rgb(${COLORS.light});\r\n  font-size: 80%;\r\n  margin: 0;\r\n  padding: 0;\r\n  ${VIEWPORT.small} {\r\n  }\r\n\r\n  ${VIEWPORT.medium} {\r\n  }\r\n\r\n  ${VIEWPORT.large} {\r\n    font-size: 68%;\r\n  }\r\n`;\r\n\r\nconst HintButton = styled.button`\r\n  cursor: pointer;\r\n  color: rgba(${COLORS.light}, 0.7);\r\n  font-size: 0.6em;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  width: 20%;\r\n  height: 100%;\r\n  background-color: rgb(${COLORS.middleviolet});\r\n  border: none;\r\n  border-radius: 20px 0 0 20px;\r\n  box-shadow: 2px 2px 5px 6px ${COLORS.shadow_RGBA};\r\n  &:hover {\r\n    background-color: rgb(${COLORS.background1_NUM});\r\n  }\r\n  &:active {\r\n    color: #f2fcfd;\r\n    background: linear-gradient(\r\n      45deg,\r\n      rgb(75, 192, 215) 100%,\r\n      rgb(220, 236, 255) 10%\r\n    );\r\n    box-shadow: 2px 2px 5px 6px rgba(58, 32, 10, 0.2);\r\n  }\r\n`;\r\n\r\nconst Score = styled.div`\r\n  grid-area: score;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.1em;\r\n  font-weight: bold;\r\n  letter-spacing: 1px;\r\n  color: ${COLORS.text};\r\n  min-width: 3em;\r\n  height: 30px;\r\n`;\r\nconst Hint = styled.div`\r\n  grid-area: middle;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.1em;\r\n  font-weight: bold;\r\n  letter-spacing: 1px;\r\n  color: ${COLORS.light};\r\n  min-width: 4em;\r\n  height: 30px;\r\n`;\r\n\r\nconst Life = styled.div`\r\n  grid-area: life;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  font-weight: bold;\r\n  min-width: 4em;\r\n  height: 30px;\r\n`;\r\n\r\nconst LifeIcon = styled.img`\r\n  padding: 2px;\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\CreateOrder.js",[],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\Keyboard.js",[],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\constants.js",[],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\Dialog.js",["91"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"@reach/router\";\r\nimport { COLORS } from \"../constants\";\r\nimport HighScoreInputDialog from \"./HighScoreInputDialog\";\r\n\r\nexport default function Dialog(props) {\r\n  const {\r\n    visible,\r\n    setVisible,\r\n\r\n    life,\r\n    setLife,\r\n    scoreState,\r\n    setScoreState,\r\n    setFeedback,\r\n    setOrderNum,\r\n    dialogType,\r\n  } = props;\r\n\r\n  const dialog = [\r\n    {\r\n      winner: [\r\n        {\r\n          img: \"https://img.icons8.com/dotty/80/000000/trophy.png\",\r\n          img_alt: \"Icon einer Trophaee\",\r\n          headline: \"Wow, geiler Typ!\",\r\n          text: \"Du hast ALLE Fragen richtig beantwortet!\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      game_over: [\r\n        {\r\n          img: \"https://img.icons8.com/dotty/80/000000/sad-cloud.png\",\r\n          img_alt: \"Icon einer traurigen Wolke\",\r\n          headline: \"Ohje, leider verloren :-(\",\r\n          text: \"Kopf hoch, beim nächsten Mal klappt es besser :-)\",\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  let prefix = \"\";\r\n  function createPrefix() {\r\n    if (dialogType === \"winner\") {\r\n      prefix = dialog[0].winner[0];\r\n      return prefix;\r\n    } else if (dialogType === \"game_over\") {\r\n      prefix = dialog[1].game_over[0];\r\n    }\r\n    return prefix;\r\n  }\r\n  createPrefix();\r\n\r\n  const handleNoBtnClick = () => {\r\n    setVisible(false); // GameOverdialog ausblenden, to refactor\r\n    setLife(3);\r\n    //life.current= 3\r\n    setScoreState(0);\r\n    setFeedback(\"\");\r\n    setOrderNum(0);\r\n  };\r\n\r\n  const content = (\r\n    <Wrap>\r\n      <Header>\r\n        <HeadLogo alt={prefix.img_alt} src={prefix.img} />\r\n      </Header>\r\n      <H2>{prefix.headline}</H2>\r\n      <P>{prefix.text}</P>\r\n      <BTNdiv>\r\n        <Link to=\"/emmet-typing-game/\">\r\n          <BTN title=\"Zurück zum Startbereich\">Beenden</BTN>\r\n        </Link>\r\n        <Link to=\"/emmet-typing-game/gamearea/\">\r\n          <BTN title=\"Startet neues Spiel\" onClick={handleNoBtnClick}>\r\n            Nochmal\r\n          </BTN>\r\n        </Link>\r\n      </BTNdiv>\r\n      <HighScoreInputDialog scoreState={scoreState} />\r\n    </Wrap>\r\n  );\r\n\r\n  let toShow;\r\n\r\n  if (visible) {\r\n    toShow = (\r\n      <DIV>\r\n        <InsetShadow>{content}</InsetShadow>\r\n      </DIV>\r\n    );\r\n  } else {\r\n    toShow = (\r\n      <DIV hidden>\r\n        <InsetShadow>{content}</InsetShadow>\r\n      </DIV>\r\n    );\r\n  }\r\n\r\n  return <>{toShow}</>;\r\n}\r\n\r\nconst BTNdiv = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n`;\r\nconst H2 = styled.div`\r\n  font-size: 1.2em;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst P = styled.div`\r\n  font-size: 0.8em;\r\n  padding: 0 30px;\r\n`;\r\n\r\nconst BTN = styled.button`\r\n  background-color: rgba(${COLORS.violet}, 0.5);\r\n  color: rgb(${COLORS.lightText});\r\n  font-weight: bold;\r\n  letter-spacing: 1px;\r\n  cursor: pointer;\r\n  min-width: 60px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  box-shadow: 1px 2px 3px 3px rgba(58, 32, 10, 0.2);\r\n  margin: 20px 20px 0;\r\n  padding: 10px;\r\n  &:hover {\r\n    background-color: rgb(${COLORS.background1_NUM});\r\n  }\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  width: 70vw;\r\n`;\r\nconst Header = styled.header`\r\n  margin-top: 10px;\r\n`;\r\nconst HeadLogo = styled.img`\r\n  opacity: 1;\r\n  height: 70px;\r\n  padding: 2px;\r\n`;\r\nconst InsetShadow = styled.div`\r\n  position: absolute;\r\n  height: 100%;\r\n  box-shadow: inset 1px 1px 2px 0px rgba(${COLORS.light}, 0.8);\r\n`;\r\n\r\nconst DIV = styled.div`\r\n  position: absolute;\r\n  opacity: 1;\r\n  background-color: rgb(${COLORS.hintfield});\r\n  border-width: 2px;\r\n  border-style: solid;\r\n  border-image: linear-gradient(\r\n      to bottom,\r\n      rgba(${COLORS.light}, 0) 1%,\r\n      rgba(${COLORS.light}, 0.8) 10%,\r\n      rgba(${COLORS.light}, 0) 100%\r\n    )\r\n    1 100%;\r\n  box-shadow: 2px 2px 5px 3px ${COLORS.shadow_RGBA};\r\n  width: 70vw;\r\n  height: 420px;\r\n  margin-top: 10vh;\r\n`;\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\StaticHeart.js",[],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\AnimatedHeart.js",["92"],"import styled, { keyframes } from \"styled-components\"\r\n\r\nexport default function AnimatedHeart(props) {\r\n  const { stopAnimation, setStopAnimation } = props\r\n\r\n  const RightHeart = styled.g`\r\n    animation: ${brokeOffDownFadeOut_right} 1s ease-in forwards;\r\n    animation-play-state: ${stopAnimation};\r\n  `\r\n\r\n  const LeftHeart = styled.g`\r\n    animation: ${brokeOffDownFadeOut_left} 1s ease-in forwards;\r\n    animation-play-state: ${stopAnimation};\r\n  `\r\n  return (\r\n    <>\r\n      <Heart\r\n        className=\"heart3\"\r\n        width=\"132\"\r\n        height=\"107\"\r\n        viewBox=\"0 0 171 146\"\r\n        fill=\"black\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <LeftHeart className=\"heart3-left\">\r\n          <path\r\n            fill-rule=\"evenodd\"\r\n            clip-rule=\"evenodd\"\r\n            d=\"M84.3753 32.9644L79 47L89 71L67 87L97 109L83.8239 145.6C75.0561 139.209 -26.1111 63.97 6.4257 18.0357C39.759 -29.0232 82.704 30.6078 84.3753 32.9644Z\"\r\n          />\r\n        </LeftHeart>\r\n        <RightHeart className=\"heart3-right\">\r\n          <path\r\n            fill-rule=\"evenodd\"\r\n            clip-rule=\"evenodd\"\r\n            d=\"M83.3753 32.7997L78 46.8353L88 70.8353L66 86.8353L96 108.835L82.8239 145.435C83.2182 145.723 83.4257 145.871 83.4257 145.871C83.4257 145.871 201.426 60.871 162.426 17.8709C123.426 -25.1291 83.4257 32.871 83.4257 32.871C83.4257 32.871 83.4088 32.8468 83.3753 32.7997Z\"\r\n          />\r\n        </RightHeart>\r\n      </Heart>\r\n    </>\r\n  )\r\n}\r\n\r\nconst brokeOffDownFadeOut_right = keyframes`\r\n 0% {\r\n    transform: translate(0%, 0%) rotate(0deg);\r\n    transform-origin: 0% bottom 0px;\r\n  }\r\n  10% {\r\n    transform: rotate(60deg);\r\n    transform: translate(10%, 0%) rotate(0deg);\r\n    transform-origin: 0% bottom 0px;\r\n    opacity: 1;\r\n  }\r\n  75% {\r\n    transform: translate(100%, 50%) rotate(120deg);\r\n    transform-origin: 0% bottom 0px;\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    transform: translate(100%, 50%) rotate(120deg);\r\n    transform-origin: 0% bottom 0px;\r\n    opacity: 0;\r\n  }\r\n \r\n`\r\n\r\nconst brokeOffDownFadeOut_left = keyframes`\r\n\r\n 0% {\r\n    transform: translate(0%, 0%) rotate(0deg);\r\n    transform-origin: 90% bottom -20px;\r\n  }\r\n  20% {\r\n    transform: rotate(60deg);\r\n    transform: translate(0%, 0%);\r\n    transform-origin: 90% bottom -20px;\r\n    opacity: 1;\r\n  }\r\n  75% {\r\n    transform: translate(-10%, 20%) rotate(-120deg);\r\n    transform-origin: 90% bottom -20px;\r\n    opacity: 0;\r\n  }\r\n\r\n  100% {\r\n    transform: translate(-10%, 20%) rotate(-120deg);\r\n    transform-origin: 90% bottom -20px;\r\n    opacity: 0;\r\n  }\r\n`\r\n\r\nconst Heart = styled.svg`\r\n    overflow: visible;\r\n    height: 20px;\r\n    width: 35px;\r\n`\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\BTN.js",["93","94","95"],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\HighScoreTable.js",["96"],"C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\InGameHeader.js",["97","98"],"import React from \"react\";\r\nimport Headlogo from \"../img/emmetgame_headlogo_schatten.png\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS, VIEWPORT } from \"../constants\";\r\n\r\nexport default function InGameHeader() {\r\n  return (\r\n    <Header>\r\n      <HeadLogo alt=\"logo\" src={Headlogo} />\r\n    </Header>\r\n  );\r\n}\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n`;\r\nconst HeadLogo = styled.img`\r\n  height: 30px;\r\n  opacity: 1;\r\n  padding: 2px;\r\n`;\r\n","C:\\Users\\marle\\Documents\\+Programmieren2020\\emmet-typing-game\\src\\components\\HighScoreInputDialog.js",["99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":22},{"ruleId":"105","severity":1,"message":"109","line":1,"column":27,"nodeType":"107","messageId":"108","endLine":1,"endColumn":33},{"ruleId":"105","severity":1,"message":"110","line":13,"column":8,"nodeType":"107","messageId":"108","endLine":13,"endColumn":16},{"ruleId":"105","severity":1,"message":"111","line":29,"column":10,"nodeType":"107","messageId":"108","endLine":29,"endColumn":14},{"ruleId":"105","severity":1,"message":"112","line":29,"column":16,"nodeType":"107","messageId":"108","endLine":29,"endColumn":23},{"ruleId":"105","severity":1,"message":"113","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"114","line":23,"column":9,"nodeType":"107","messageId":"108","endLine":23,"endColumn":19},{"ruleId":"105","severity":1,"message":"115","line":25,"column":9,"nodeType":"107","messageId":"108","endLine":25,"endColumn":19},{"ruleId":"105","severity":1,"message":"116","line":27,"column":9,"nodeType":"107","messageId":"108","endLine":27,"endColumn":16},{"ruleId":"105","severity":1,"message":"117","line":13,"column":9,"nodeType":"107","messageId":"108","endLine":13,"endColumn":22},{"ruleId":"105","severity":1,"message":"118","line":68,"column":10,"nodeType":"107","messageId":"108","endLine":68,"endColumn":17},{"ruleId":"105","severity":1,"message":"119","line":12,"column":5,"nodeType":"107","messageId":"108","endLine":12,"endColumn":9},{"ruleId":"105","severity":1,"message":"120","line":4,"column":26,"nodeType":"107","messageId":"108","endLine":4,"endColumn":42},{"ruleId":"105","severity":1,"message":"111","line":6,"column":11,"nodeType":"107","messageId":"108","endLine":6,"endColumn":15},{"ruleId":"105","severity":1,"message":"121","line":6,"column":17,"nodeType":"107","messageId":"108","endLine":6,"endColumn":24},{"ruleId":"105","severity":1,"message":"122","line":15,"column":11,"nodeType":"107","messageId":"108","endLine":15,"endColumn":14},{"ruleId":"105","severity":1,"message":"123","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":28},{"ruleId":"105","severity":1,"message":"124","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":16},{"ruleId":"105","severity":1,"message":"125","line":4,"column":18,"nodeType":"107","messageId":"108","endLine":4,"endColumn":26},{"ruleId":"105","severity":1,"message":"125","line":3,"column":18,"nodeType":"107","messageId":"108","endLine":3,"endColumn":26},{"ruleId":"105","severity":1,"message":"126","line":8,"column":9,"nodeType":"107","messageId":"108","endLine":8,"endColumn":15},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'HighScoreTable' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Headlogo' is defined but never used.","'type' is assigned a value but never used.","'setType' is assigned a value but never used.","'useState' is defined but never used.","'trash_icon' is assigned a value but never used.","'clear_icon' is assigned a value but never used.","'ok_icon' is assigned a value but never used.","'animatedHeart' is assigned a value but never used.","'Lifecon' is defined but never used.","'life' is assigned a value but never used.","'setStopAnimation' is assigned a value but never used.","'onClick' is assigned a value but never used.","'btn' is assigned a value but never used.","'HighScoreInputDialog' is defined but never used.","'COLORS' is defined but never used.","'VIEWPORT' is defined but never used.","'points' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]